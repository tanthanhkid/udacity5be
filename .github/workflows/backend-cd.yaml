name: backend-cd

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint_and_test:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v2

      # Set up Python environment.
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Install dependencies.
      - name: Install dependencies
        run: pip install pipenv && pipenv install --dev

      # Run the tests.
      - name: Run tests
        run: pipenv run test

      # Run the linter.
      - name: Run linter
        run: pipenv run lint

  build:
    runs-on: ubuntu-latest
    needs: lint_and_test

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v2

      # Set up Python environment.
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Install dependencies.
      - name: Install dependencies
        run: pip install pipenv && pipenv install --dev

      # Build the Docker image.
      - name: Build Docker image
        run: |
          docker build --tag mp-backend:${{ github.sha }} .
          docker tag mp-backend:${{ github.sha }} ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}

      # Configure AWS credentials. 
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Log in to Amazon ECR and push the Docker image.
      - name: Push Docker image to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URI }}
          docker push ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v2

      # Configure AWS credentials. 
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Set up kubectl.
      - name: Set up kubectl
        run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.AWS_CLUSTER_NAME }}

      # Deploy the Docker image to the Kubernetes cluster.
      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/backend backend=${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
          kubectl apply -f k8s/deployment.yaml --validate=false
          kubectl apply -f k8s/service.yaml --validate=false

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY_URI: "593331310640.dkr.ecr.us-east-1.amazonaws.com/backend"
  AWS_CLUSTER_NAME: "cluster"
